CREATE TYPE comment_target_types AS ENUM (
'ontology',
'subject', -- that would be non-ontology subjects
'triple',
-- 'ontology-triple', -- these also require an original context id, otherwise we can't prove that the triple was in the ontology, displaying these is complicated regardless because we have to check if the triple is in the current version, leave out for now
-- 'ontology-subgraph',
'subgraph', -- FIXME or is replica, s p <blank>
'pull',
'review'
);

CREATE TABLE comment_targets(
       /*
       we keep targets separate because there is a good chance
       that if there is one comment there will be other comments
       and the targets are likely to be sparse while there could
       be many comments
       */
       id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
       target_type comment_target_types NOT NULL,
       context_identity bytea references identities (identity), -- optional used to e.g. target comments to exact versions of an entity
       perspective integer references perspectives (id), -- used to provide comments on specific variants of a term/uri e.g. tgbugs/ilx_0101431 instead of always going to e.g. base/ilx_0101431 which is what the iri will be for term comments
       iri uri,
       triple_identity bytea references triples (triple_identity),
       subgraph_identity bytea, -- TODO consider ... how/whether we do this, e.g. for owl axioms, things in lists
       subgraph_blank integer, -- TODO see if we want this
       -- check ((target_type == 'ontology-triple' or target_type == 'ontology-subgraph') or (iri is null or ((triple_identity is null or target_type == 'ontology-triple') and ((subgraph_identity is null and subgraph_blank is null) or target_type = 'ontology-subgraph')))),
       CHECK (iri IS NULL OR ((triple_identity IS NULL) AND (subgraph_identity IS NULL AND subgraph_blank IS NULL))), -- using iri as context for ontology doesn't work because triples might not be in ontologies
       CHECK (triple_identity IS NULL OR (subgraph_identity IS NULL AND subgraph_blank IS NULL)),
       CHECK (context_identity IS NULL OR perspective IS NULL), -- both may be null but both cannot be not null
       CHECK ((context_identity IS NULL AND perspective IS NULL) OR
               -- TODO are there cases where an ontology is ingested and has no bound name and no associated iri?
               -- if so then we might want to allow comments on context alone, but mostly i think we want comments
               -- on named ontology files at a particular identity
               -- (context_identity is not null and target_type = 'ontology') or
              (iri IS NOT NULL OR triple_identity IS NOT NULL OR subgraph_identity IS NOT NULL)),
       pull integer unique references pull_requests (id),
       review_process integer unique references review_processes (id),
       check (
       ((target_type = 'ontology' or target_type = 'subject') and iri is not null) or
       (target_type = 'triple' and triple_identity is not null) or
       -- (target_type = 'ontology-triple' and iri is not null and triple_identity is not null) or
       (target_type = 'subgraph' and subgraph_identity is not null) or -- TODO what to do about subgraph_blank ...
       (target_type = 'pull' and pull is not null) or
       (target_type = 'review' and review_process is not null))
);

-- ontology, triple, and subgraph are the ones where it makes sense for them to be scoped to context_identity or perspective
CREATE UNIQUE INDEX comment_targets_cpi_index ON comment_targets (context_identity, perspective, iri) NULLS NOT DISTINCT;
CREATE UNIQUE INDEX comment_targets_cpt_index ON comment_targets (context_identity, perspective, triple_identity) NULLS NOT DISTINCT;
CREATE UNIQUE INDEX comment_targets_cps_index ON comment_targets (context_identity, perspective, subgraph_identity, subgraph_blank) NULLS NOT DISTINCT;
/*
note that perspective ti/si are used to scope comments on inclusion of triples in a perspective
however if the triple is not currently in the perspective that can cause some confusion, so need
to proceed carefully, e.g. because if we create perspectives that do not include in their history
core the interlex sync terms then it could be even more broken
*/

CREATE TABLE comments(
       id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
       target integer not null references comment_targets (id),
       user_id integer not null references users (id),
       comment_text text not null,
       CHECK ((comment_text ~* '^\S+') AND (comment_text ~* '\S+$')),
       UNIQUE (target, user_id, comment_text),  -- not quite r9k but prevent exact duplicates and oscillating between two versions of the same text, if the user wants to go back to the prior version they can note that
       created_datetime TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
       replaced bool DEFAULT FALSE, -- replaced_datetime redundant as always matchs replacement created_datetime
       replaces integer references comments (id) -- this is how we do edits with history
       -- all comments for a given target are returned, those not replaced are at the top
       -- previous versions are returned as an ordered list
);
