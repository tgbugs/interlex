# -*- org-babel-tangle-use-relative-file-links: t; orgstrap-cypher: sha256; orgstrap-norm-func-name: orgstrap-norm-func--dprp-1-0; orgstrap-block-checksum: dcf44c89657e9c69deb39063d830bdda453810cd0f19e4e0ba838404f97c089e; -*-
# [[orgstrap][jump to the orgstrap block for this file]]
#+TITLE: InterLex alternate resolver setup
#+OPTIONS: num:nil

#+name: orgstrap-shebang
#+begin_src bash :eval never :results none :exports none
set -e "-C" "-e" "-e"
{ null=/dev/null;} > "${null:=/dev/null}"
{ args=;file=;MyInvocation=;__p=$(mktemp -d);touch ${__p}/=;chmod +x ${__p}/=;__op=$PATH;PATH=${__p}:$PATH;} > "${null}"
$file = $MyInvocation.MyCommand.Source
{ file=$0;PATH=$__op;rm ${__p}/=;rmdir ${__p};} > "${null}"
emacs -batch -no-site-file -eval "(let (vc-follow-symlinks) (defun orgstrap--confirm-eval (l _) (not (memq (intern l) '(elisp emacs-lisp)))) (let ((file (pop argv)) enable-local-variables) (find-file-literally file) (end-of-line) (when (eq (char-before) ?\^m) (let ((coding-system-for-read 'utf-8)) (revert-buffer nil t t)))) (let ((enable-local-eval t) (enable-local-variables :all) (major-mode 'org-mode)) (require 'org) (org-set-regexps-and-options) (hack-local-variables)))" "${file}" -- ${args} "${@}"
exit
<# powershell open
#+end_src

InterLex =alt= is a reduced set of the InterLex codebase for serving
directly from the mysql database. The necessary subset of the code
that is needed is copied into this directory and installed from the
main interlex source.

* Using this file :noexport:
:PROPERTIES:
:VISIBILITY: folded
:END:
To update the contents of [[file:./bin/]] to match this file run =./README.org tangle=.
Alternately from inside emacs run =C-c C-v t= aka ~org-babel-tangle~.
You should also run =shellcheck= on the tangled files if you make any changes.
* Setup
:PROPERTIES:
:CUSTOM_ID: setup
:END:
** Install wheel on build machine
The build machine will work with any version of python, however that
version does need to have =wheel= installed e.g. via =pip install wheel=.
** Install python on server
Install =python3.7-devel= (or greater), =pip=, and =pipenv= on the server that
will run InterLex Alt. For example on CentOS

#+begin_src bash
sudo yum install centos-release-scl-rh
sudo yum install rh-python38-python rh-python38-python-devel # devel needed for pyxattr
sudo /opt/rh/rh-python38/root/usr/bin/python3.8 -m ensurepip
sudo /opt/rh/rh-python38/root/usr/local/bin/pip3.8 install pipenv
sudo ln -s /opt/rh/rh-python38/root/usr/local/bin/pipenv /usr/bin/pipenv
#+end_src

** Set environment variables
Set =INTERLEX_DEPLOY_USER=, =INTERLEX_USER=, and =INTERLEX_SERVER=
environment variables.  The =INTERLEX_DEPLOY_USER= should have =sudo=
access, =INTERLEX_USER= should NOT have =sudo= or =wheel= access.

An example would be
#+begin_src bash
INTERLEX_DEPLOY_USER=user
INTERLEX_USER=interlex
INTERLEX_SERVER=localhost
#+end_src

In bamboo set these for all scripts that that are run, for example
Default Job Script remote ilxalt.
** Create interlex runtime user account
Do this manually right now for sanity.
The =GID= is matched to the conventions we use for gentoo docker images.
#+begin_src bash
GID=839
groupadd -g ${GID} interlex
useradd -m -k /etc/skel -u ${GID} -g ${GID} -d /var/lib/interlex interlex
chmod 0755 /var/lib/interlex
#+end_src
** Build and deploy code and config
Get the absolute path to the script and use it to find the alt folder.
#+name: &alt-path
#+begin_src bash
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve all symlinks
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # resolve relative symlinks
done
ABS_PATH="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

ALT_PATH="${ABS_PATH}/../"
#+end_src

Go to the alt folder and clean out any existing build files.
#+name: &pushd-clean
#+begin_src bash
pushd "${ALT_PATH}" &&
git clean -dfx &&  # cleans only the alt subdir
git checkout HEAD -- resources/filesystem/  # prevent stale user
popd || exit 1
#+end_src

Build python wheels and package them for deployment.
#+name: &build-alt-zip
#+begin_src bash
pushd "${ALT_PATH}" &&
python setup.py bdist_wheel --universal &&
python setup.py clean --all &&
rm -rf ./*.egg-info &&
mv dist/* run/ &&
rmdir dist &&
#pipenv install  # leave this out for now due to gunicorn detection issues
rm alt.zip;
zip -r alt.zip README.org &&
zip -r alt.zip run/ &&
popd || exit 2
#+end_src

# FIXME can't assume that INTERLEX_USER and INTERLEX_RUNTIME_USER are the same (sigh)
# FIXME look at scigraph deploy for the right way to do this ?? no that doesn't quite
# work because I hack around the permissioning issue by having two separate ssh
# connections, which makes the code clearer on the one hand but the connections more
# complex on the other (sigh)
Deploy the build artifact to the server.
# FIXME :comments noweb severly broken, ignores `org-babel-tangle-use-relative-file-links'
#+name: &rsync-zip
#+begin_src bash :noweb yes :comments link
<<&alt-path>>
TEMP_DIR=$(ssh ${INTERLEX_DEPLOY_USER}@${INTERLEX_SERVER} "mktemp -d")
TD_EXIT=$?
if [ $TD_EXIT -ne 0 ]; then
    exit $TD_EXIT
fi
pushd "${ALT_PATH}" &&
# so apparently we're deploying on things so old that rsync doesn't have the commands on the remote it needs
#rsync --rsh ssh --archive --verbose alt.zip ${INTERLEX_DEPLOY_USER}@${INTERLEX_SERVER}:${TEMP_DIR}/alt.zip || exit 20
scp alt.zip ${INTERLEX_DEPLOY_USER}@${INTERLEX_SERVER}:${TEMP_DIR}/alt.zip || exit 20
popd || exit 3
#+end_src

The first time InterLex Alt is set up on a server run [[file:./bin/config-build.sh]].
#+name: config-build.sh
#+header: :shebang "#!/usr/bin/env bash"
#+header: :noweb no-export
#+header: :tangle-mode (identity #o755)
#+begin_src bash :tangle ./bin/config-build.sh :comments link
<<&alt-path>>
<<&pushd-clean>>
pushd "${ALT_PATH}" &&
grep -rl interlex resources/filesystem/ | xargs sed -i "s/{:interlex-user}/${INTERLEX_USER}/g" &&
popd || exit 101
<<&build-alt-zip>>
pushd "${ALT_PATH}" &&
zip -r alt.zip resources/filesystem/  # first time only add deploy files
popd || exit 102
#+end_src

Subsequently run [[file:./bin/build.sh]].
#+name: build.sh
#+header: :shebang "#!/usr/bin/env bash"
#+header: :noweb no-export
#+header: :tangle-mode (identity #o755)
#+begin_src bash :tangle ./bin/build.sh :comments link
<<&alt-path>>
<<&pushd-clean>>
<<&build-alt-zip>>
#+end_src
** Remote commands
After deploying the files to the server run the following remote
commands on =INTERLEX_SERVER=. NOTE: Make sure you create a
=~/.mypass= file that conforms to the syntax of =~/.pgpass= i.e.
each line should look like =server.url.org:port:dbname:user:password=
and should have read write permission only for your user (=chmod 0600=).
If you do not a warning will appear and the server will not start.

The first time run [[file:./bin/config-remote.sh]].

#+name: config-remote.sh
#+header: :shebang "#!/usr/bin/env bash" :noweb no-export :tangle-mode (identity #o755)
#+begin_src bash :tangle ./bin/config-remote.sh :comments link
<<&rsync-zip>>
ssh ${INTERLEX_DEPLOY_USER}@${INTERLEX_SERVER} "
<<&config-remote-command>>
"
SSH_EXIT=$?
if [ $SSH_EXIT -eq 15 ]; then
    echo you need to edit ~/.mypass on ${INTERLEX_SERVER} as ${INTERLEX_USER} to complete setup
    echo the pattern used to set the password is documented in step five of README.org on the server
    exit $SSH_EXIT
elif [ $SSH_EXIT -ne 0 ]; then
    echo remote command failed with $SSH_EXIT
    exit $SSH_EXIT
fi
#+end_src

#+name: &sudo-runtime-user
#+begin_src bash :exports none
sudo -u ${INTERLEX_USER}
#+end_src

#+name: &remote-root-commands-0
#+begin_src bash
mv ${TEMP_DIR}/alt.zip /var/lib/interlex/alt.zip
rmdir ${TEMP_DIR}
chown ${INTERLEX_USER}:${INTERLEX_USER} /var/lib/interlex/alt.zip
#+end_src
#+name: &config-remote-runtime-user-commands-1
#+begin_src bash
rm -rf run/
rm -rf resources/filesystem/
unzip -o alt.zip || exit 1
chmod 0755 run
#+end_src
Have to chmod run so that the deploy user can pushd into it so the
paths are correct.
#+name: &config-remote-root-commands-1
#+begin_src bash
/bin/cp -f resources/filesystem/etc/systemd/system/ilxalt.service /etc/systemd/system/ || exit 2
/bin/cp -f resources/filesystem/etc/systemd/system/ilxalt.socket /etc/systemd/system/ || exit 3
/bin/cp -f resources/filesystem/etc/tmpfiles.d/ilxalt.conf /etc/tmpfiles.d/ || exit 4
/bin/cp -f resources/filesystem/etc/nginx/sites-available/uri.interlex.org.conf /etc/nginx/sites-available/ || exit 5  # carful here XXX DO NOT NUKE FROM ORBIT THANKS
unlink /etc/nginx/sites-enabled/uri.interlex.org.conf
ln -s /etc/nginx/sites-available/uri.interlex.org.conf /etc/nginx/sites-enabled/uri.interlex.org.conf || exit 6
systemd-tmpfiles --create || exit 7
systemctl daemon-reload || exit 8
systemctl enable ilxalt || exit 9
#+end_src
#+name: &config-remote-runtime-user-commands-2
#+begin_src bash
pipenv --rm  # the very first time this can fail
pipenv install --skip-lock || exit 11
#+end_src
#+name: &config-remote-runtime-user-commands-3
#+begin_src bash
touch .mypass || exit 13
chmod 0600 .mypass || exit 14
#+end_src

# FIXME org-babel bug where <<&a>> <<&b>> doesn't expand <<&a>> as a prefix correctly
#+name: &config-remote-command
#+begin_src bash :noweb yes
sudo <<&remote-root-commands-0>>
pushd /var/lib/interlex || exit 22
sudo -u ${INTERLEX_USER} <<&config-remote-runtime-user-commands-1>>
sudo <<&config-remote-root-commands-1>>
pushd run  || exit 10
sudo -u ${INTERLEX_USER} <<&config-remote-runtime-user-commands-2>>
popd || exit 12
sudo -u ${INTERLEX_USER} <<&config-remote-runtime-user-commands-3>>
if [ ! -s .mypass ]; then
    echo ~/.mypass has no records
    exit 15
fi
popd || exit 16
<<&restart-ilxalt>>
sudo systemctl restart nginx
#+end_src

#+name: &restart-ilxalt
#+begin_src bash
sudo systemctl restart ilxalt &&
    sleep 5
sudo systemctl is-active --quiet ilxalt
if [ $? -ne 0 ]; then
    sudo journalctl -u ilxalt.service -n 50
    exit 100;
fi
#+end_src

Subsequently run [[file:./bin/remote.sh]].
#+name: &remote-command-runtime-user-commands-1
#+begin_src bash
mv -f run/*.whl .
rm run/Pipfile.lock
unzip -o alt.zip || exit 1
#+end_src
#+name: &remote-command-runtime-user-commands-2
#+begin_src bash
pipenv --rm
pipenv install *.whl --skip-lock || exit 3
#+end_src

#+name: &remote-command
#+begin_src bash :noweb yes
sudo <<&remote-root-commands-0>>
pushd /var/lib/interlex
sudo -u ${INTERLEX_USER} <<&remote-command-runtime-user-commands-1>>
pushd run || exit 2
sudo -u ${INTERLEX_USER} <<&remote-command-runtime-user-commands-2>>
popd || exit 4
popd || exit 5
<<&restart-ilxalt>>
#+end_src

#+name: remote.sh
#+header: :shebang "#!/usr/bin/env bash" :noweb no-export :tangle-mode (identity #o755)
#+begin_src bash :tangle ./bin/remote.sh :comments link
<<&rsync-zip>>
ssh ${INTERLEX_DEPLOY_USER}@${INTERLEX_SERVER} "
<<&remote-command>>
"
SSH_EXIT=$?
if [ $SSH_EXIT -ne 0 ]; then
    exit $SSH_EXIT
fi
#+end_src

* Testing
:PROPERTIES:
:CUSTOM_ID: testing
:END:
On a redeploy, the easiest way to test whether everything is working is
to change TestRoutes.host in =test/test_alt.py= to match the test server
and then run =python -m unittest test/test_alt.py=. TODO add this to the
deploy scripts for the test server? Simple testing
#+begin_src bash
TEST_HOST=test.host; curl --header 'Host: uri.interlex.org' http://${TEST_HOST}/base/ilx_0109470.ttl
TEST_HOST=test.host; curl --header 'Host: uri.interlex.org' http://${TEST_HOST}/sparc/ontologies/community-terms.ttl
#+end_src
* Bootstrap :noexport:

#+name: orgstrap
#+begin_src elisp :results none :exports none :lexical yes
(when noninteractive
  (let ((tangle (member "tangle" argv)))
    (when tangle
      (let (enable-local-eval)
        ;; this pattern is required when tangling to avoid infinite loops
        (revert-buffer nil t nil)
        (setq-local find-file-literally nil))
      (org-babel-tangle))))
#+end_src

** Local Variables :ARCHIVE:

# close powershell comment #>
# Local Variables:
# eval: (progn (setq-local orgstrap-min-org-version "8.2.10") (let ((a (org-version)) (n orgstrap-min-org-version)) (or (fboundp #'orgstrap--confirm-eval) (not n) (string< n a) (string= n a) (error "Your Org is too old! %s < %s" a n))) (defun orgstrap-norm-func--dprp-1-0 (body) (let ((p (read (concat "(progn\n" body "\n)"))) (m '(defun defun-local defmacro defvar defvar-local defconst defcustom)) print-quoted print-length print-level) (cl-labels ((f (b) (cl-loop for e in b when (listp e) do (or (and (memq (car e) m) (let ((n (nthcdr 4 e))) (and (stringp (nth 3 e)) (or (cl-subseq m 3) n) (f n) (or (setcdr (cddr e) n) t)))) (f e))) p)) (prin1-to-string (f p))))) (unless (boundp 'orgstrap-norm-func) (defvar-local orgstrap-norm-func orgstrap-norm-func-name)) (defun orgstrap-norm-embd (body) (funcall orgstrap-norm-func body)) (unless (fboundp #'orgstrap-norm) (defalias 'orgstrap-norm #'orgstrap-norm-embd)) (defun orgstrap-org-src-coderef-regexp (_fmt &optional label) (let ((fmt org-coderef-label-format)) (format "\\([:blank:]*\\(%s\\)[:blank:]*\\)$" (replace-regexp-in-string "%s" (if label (regexp-quote label) "\\([-a-zA-Z0-9_][-a-zA-Z0-9_ ]*\\)") (regexp-quote fmt) nil t)))) (unless (fboundp #'org-src-coderef-regexp) (defalias 'org-src-coderef-regexp #'orgstrap-org-src-coderef-regexp)) (defun orgstrap--expand-body (info) (let ((coderef (nth 6 info)) (expand (if (org-babel-noweb-p (nth 2 info) :eval) (org-babel-expand-noweb-references info) (nth 1 info)))) (if (not coderef) expand (replace-regexp-in-string (org-src-coderef-regexp coderef) "" expand nil nil 1)))) (defun orgstrap--confirm-eval-portable (lang _body) (not (and (member lang '("elisp" "emacs-lisp")) (let* ((body (orgstrap--expand-body (org-babel-get-src-block-info))) (body-normalized (orgstrap-norm body)) (content-checksum (intern (secure-hash orgstrap-cypher body-normalized)))) (eq orgstrap-block-checksum content-checksum))))) (unless (fboundp #'orgstrap--confirm-eval) (defalias 'orgstrap--confirm-eval #'orgstrap--confirm-eval-portable)) (let (enable-local-eval) (vc-find-file-hook)) (let ((ocbe org-confirm-babel-evaluate) (obs (org-babel-find-named-block "orgstrap"))) (if obs (unwind-protect (save-excursion (setq-local orgstrap-norm-func orgstrap-norm-func-name) (setq-local org-confirm-babel-evaluate #'orgstrap--confirm-eval) (goto-char obs) (org-babel-execute-src-block)) (when (eq org-confirm-babel-evaluate #'orgstrap--confirm-eval) (setq-local org-confirm-babel-evaluate ocbe)) (org-set-visibility-according-to-property)) (warn "No orgstrap block."))))
# End:
