* InterLex Alt
:PROPERTIES:
:CUSTOM_ID: interlex-alt
:END:

This is a reduced set of the InterLex codebase for serving directly from
the mysql database. The necessary subset of the code that is needed is
copied into this directory and installed from the main interlex source.

* Setup
:PROPERTIES:
:CUSTOM_ID: setup
:END:

** Install wheel on build machine
The build machine will work with any version of python, however it that
version does need to have =wheel= installed e.g. via =pip install wheel=.

** Install python on server
Install =python3.6-devel= (or greater), =pip=, and =pipenv= on the server that
will run InterLex Alt. For example on CentOS

#+begin_src bash
sudo yum install python36-devel python36-pip
sudo pip install pipenv
#+end_src

** Set environment variables
Set =INTERLEX_USER= and =INTERLEX_SERVER= environment variables.
The =INTERLEX_USER= should have =sudo= access. NOTE: this is probably
bad security practice since =INTERLEX_USER= also runs the server.

** Build and deploy code and config

Get the absolute path to the script and use it to find the alt folder.
#+name: alt-path
#+begin_src bash
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve all symlinks
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # resolve relative symlinks
done
ABS_PATH="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

ALT_PATH="${ABS_PATH}/../"
echo ${ALT_PATH}
#+end_src

Go to the alt folder and clean out any existing build files.
#+name: pushd-clean
#+begin_src bash
pushd ${ALT_PATH} &&
git clean -dfx &&  # cleans only the alt subdir
#+end_src

Build python wheels and package them for deployment.
#+name: build-alt-zip
#+begin_src bash
python setup.py bdist_wheel --universal &&
python setup.py clean --all &&
rm -rf *.egg-info &&
mv dist/* run/ &&
rmdir dist &&
#pipenv install  # leave this out for now due to gunicorn detection issues
rm alt.zip;
zip -r alt.zip README.org &&
zip -r alt.zip run/ &&
#+end_src

Deploy the build artifact to the server.
#+name: scp-zip
#+begin_src bash
scp -v alt.zip ${INTERLEX_USER}@${INTERLEX_SERVER}:/home/${INTERLEX_USER}/
popd
#+end_src

The first time InterLex Alt is set up on a server run [[file:./bin/config-build.sh]].
#+name: config-build.sh
#+header: :shebang "#!/usr/bin/env bash" :noweb yes :tangle-mode (identity #o755)
#+begin_src bash :tangle ./bin/config-build.sh :comments noweb
<<alt-path>>
<<pushd-clean>>
grep -rl interlex deploy_files/ | xargs sed -i "s/{interlex-user}/${INTERLEX_USER}/g" &&
<<build-alt-zip>>
zip -r alt.zip deploy_files/  # first time only add deploy files
<<scp-zip>>
#+end_src

Subsequently run [[file:./bin/build.sh]].
#+name: build.sh
#+header: :shebang "#!/usr/bin/env bash" :noweb yes :tangle-mode (identity #o755)
#+begin_src bash :tangle ./bin/build.sh :comments noweb
<<alt-path>>
<<pushd-clean>>
<<build-alt-zip>>
<<scp-zip>>
#+end_src

** Remote commands
After deploying the files to the server run the following remote
commands on =INTERLEX_SERVER=. NOTE: Make sure you create a
=~/.mypass= file that conforms to the syntax of =~/.pgpass= i.e.
each line should look like =server.url.org:port:dbname:user:password=
and should have read write permission only for your user (=chmod 0600=).
If you do not a warning will appear and the server will not start.

The first time run [[file:./bin/config-remote.sh]].
#+name: config-remote-command
#+begin_src bash
rm -rf run/;
rm -rf deploy_files/;
unzip -o alt.zip &&
    sudo /bin/cp -f deploy_files/etc/systemd/system/ilxalt.service /etc/systemd/system/ &&
    sudo /bin/cp -f deploy_files/etc/systemd/system/ilxalt.socket /etc/systemd/system/ &&
    sudo /bin/cp -f deploy_files/etc/tmpfiles.d/ilxalt.conf /etc/tmpfiles.d/ &&
    sudo /bin/cp -f deploy_files/etc/nginx/sites-available/uri.interlex.org.conf /etc/nginx/sites-available/ && # carful here
    sudo unlink /etc/nginx/sites-enabled/uri.interlex.org.conf;
sudo ln -s /etc/nginx/sites-available/uri.interlex.org.conf /etc/nginx/sites-enabled/uri.interlex.org.conf &&
    sudo systemd-tmpfiles --create &&
    sudo systemctl enable ilxalt &&
    pip3.6 install --user --ignore-installed pipenv &&
    cd run &&
    pipenv --rm;  # the very first time this can fail
pipenv install &&
    cd ~/ &&
    touch .mypass &&
    chmod 0600 .mypass
if [ -s .mypass ]; then
    sudo systemctl restart ilxalt &&
        sudo systemctl restart nginx;
else
    echo ~/.mypass has no records;
    exit 2;
fi
#+end_src

#+name: config-remote.sh
#+header: :shebang "#!/usr/bin/env bash" :noweb yes :tangle-mode (identity #o755)
#+begin_src bash :tangle ./bin/config-remote.sh :comments noweb
ssh ${INTERLEX_USER}@${INTERLEX_SERVER} "
<<config-remote-command>>
"
SSH_EXIT=$?
if [ $SSH_EXIT -eq 2 ]; then
    echo you need to edit ~/.mypass on ${INTERLEX_SERVER} as ${INTERLEX_USER} to complete setup
    echo the pattern used to set the password is deocumented in step five of README.md on the server
    exit $SSH_EXIT
elif [ $SSH_EXIT -ne 0 ]; then
    exit $SSH_EXIT
fi
#+end_src

Subsequently run [[file:./bin/remote.sh]].
#+name: remote-command
#+begin_src bash
mv -f run/*.whl . ;
rm run/Pipenv.lock;
unzip -o alt.zip &&
    cd run &&
    pipenv --rm;
pipenv install *.whl &&
    sudo systemctl restart ilxalt &&
    sleep 5
sudo systemctl is-active --quiet ilxalt
if [ $? -ne 0 ]; then
    sudo journalctl -u ilxalt.service -n 50;
    exit 1;
fi
#+end_src

#+name: remote.sh
#+header: :shebang "#!/usr/bin/env bash" :noweb yes :tangle-mode (identity #o755)
#+begin_src bash :tangle ./bin/remote.sh :comments noweb
ssh ${INTERLEX_USER}@${INTERLEX_SERVER} "
<<remote-command>>
"
SSH_EXIT=$?
if [ $SSH_EXIT -ne 0 ]; then
    exit $SSH_EXIT
fi
#+end_src

* Testing
:PROPERTIES:
:CUSTOM_ID: testing
:END:

On a redeploy, the easiest way to test whether everything is working is
to change TestRoutes.host in =test/test_alt.py= to match the test server
and then run =python -m unittest test/test_alt.py=. TODO add this to the
deploy scripts for the test server? Simple testing
=curl --header 'Host: uri.interlex.org' http://${TEST_HOST}/base/ilx_0109470.ttl=
